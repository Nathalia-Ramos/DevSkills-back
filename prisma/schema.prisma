generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Usuário
model Usuario {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome                 String   @db.VarChar(180)
  email                String   @db.VarChar(110)
  senha                String   @db.VarChar(60)
  cpf                  Int      @db.Int
  data_nascimento      DateTime @db.Date
  tag                  String   @db.VarChar(45)
  ativo                Boolean  @db.TinyInt
  pontuacao_plataforma Int      @db.Int
  foto_perfil          String?  @db.VarChar(150)
  biografia            String?  @db.Text
  link_github          String?  @db.Text
  link_portifolio      String?  @db.Text

  //Relacionamento com a tabela Endereco_Usuario
  EnderecoUsuario EnderecoUsuario[]
  usuarioTesteComportamental UsuarioTesteComportamental[]

  // Relacionando com a tabela de Gênero
  genero   Genero @relation(fields: [idGenero], references: [id])
  idGenero Int    @map("id_genero") @db.Int

  // Relaciomentos com tabelas intermediárias
  usuarioStack      UsuarioStack[]
  usuarioHabilidade UsuarioHabilidade[]
  usuarioIdioma     UsuarioIdioma[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UsuarioTelefone UsuarioTelefone[]

  @@map("tblusuario")
}

model Genero {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome String @db.VarChar(22)

  // Relacionando com o usuário
  usuarios Usuario[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblgenero")
}

model UsuarioTelefone {
  id Int @id @unique @default(autoincrement()) @db.Int

  ddd    String @db.VarChar(2)
  numero String @db.VarChar(10)

  // Relacionando com a tabela de TipoTelefone
  tipoTelefone   TipoTelefone @relation(fields: [idTipoTelefone], references: [id])
  idTipoTelefone Int          @map("id_tipo_telefone") @db.Int

  // Relacionando com a tabela de Usuário
  usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int     @map("id_usuario") @db.Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblusuario_telefone")
}

model TipoTelefone {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome String @db.VarChar(20)

  // Relacionando com a tabela de UsuarioTelefone
  usuarioTelefone UsuarioTelefone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tbltipo_telefone")
}

// FIM - Usuário

//Linguagens
model Idioma {
  id   Int    @id @unique @default(autoincrement()) @db.Int
  nome String @db.VarChar(80)

  usuarioIdioma UsuarioIdioma[]

  @@map("tblidioma")
}

model HabilidadeTipo {
  id    Int     @id @unique @default(autoincrement()) @db.Int
  nome  String  @db.VarChar(45)
  ativo Boolean @db.TinyInt

  habilidade Habilidade[]

  @@map("tblhabilidade_tipo")
}

model Stack {
  id   Int    @id @unique @default(autoincrement()) @db.Int
  nome String @db.VarChar(30)

  habilidade   Habilidade[]
  UsuarioStack UsuarioStack[]

  @@map("tblstack")
}

model Habilidade {
  id    Int     @id @unique @default(autoincrement()) @db.Int
  nome  String  @db.VarChar(45)
  icone String  @db.VarChar(45)
  ativo Boolean @db.TinyInt

  stack          Stack          @relation(fields: [idStack], references: [id])
  habilidadeTipo HabilidadeTipo @relation(fields: [idHabilidadeTipo], references: [id])

  idStack Int @map("id_stack") @db.Int

  idHabilidadeTipo Int @map("id_habilidade_tipo") @db.Int

  usuarioHabilidade UsuarioHabilidade[]

  @@map("tblhabilidade")
}

//many to many entre usuario e habilidade
model UsuarioHabilidade {
  id Int @id @unique @default(autoincrement()) @db.Int

  usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int     @map("id_usuario") @db.Int

  habilidade   Habilidade @relation(fields: [idHabilidade], references: [id])
  idHabilidade Int        @map("id_habilidade") @db.Int

  @@map("tblusuario_habilidade")
}

model UsuarioStack {
  id Int @id @unique @default(autoincrement()) @db.Int

  usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int     @map("id_usuario") @db.Int

  stack   Stack @relation(fields: [idStack], references: [id])
  idStack Int   @map("id_stack") @db.Int

  @@map("tblusuario_stack")
}

model UsuarioIdioma {
  id Int @id @unique @default(autoincrement()) @db.Int

  // Relacionamento com a tabela de idioma
  idioma   Idioma @relation(fields: [idIdioma], references: [id])
  idIdioma Int    @map("id_idioma") @db.Int

  // Relacionamento com a tabela de Usuario
  usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int     @map("id_usuario") @db.Int

  @@map("tblusuario_idioma")
}

// FIM - Linguagens

//LAYER Endereço
model Estado {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome String @db.VarChar(45)

  cidade Cidade[]

  @@map("tblestado")
}

model Cidade {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome String @db.VarChar(80)

  estado   Estado @relation(fields: [idEstado], references: [id])
  idEstado Int    @map("id_estado") @db.Int

  EnderecoUsuario EnderecoUsuario[]
  EnderecoEmpresa EnderecoEmpresa[]

  @@map("tblcidade")
}

model EnderecoUsuario {
  id Int @id @unique @default(autoincrement()) @db.Int

  logradouro  String  @db.VarChar(100)
  numero      String  @db.VarChar(10)
  bairro      String  @db.VarChar(120)
  cep         String  @db.VarChar(15)
  complemento String? @db.VarChar(45)

  cidade   Cidade @relation(fields: [idCidade], references: [id])
  idCidade Int    @map("id_cidade") @db.Int

  usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int     @map("id_usuario") @db.Int

  @@map("tblendereco_usuario")
}

model EnderecoEmpresa {
  id Int @id @unique @default(autoincrement()) @db.Int

  logradouro  String  @db.VarChar(100)
  numero      String  @db.VarChar(10)
  bairro      String  @db.VarChar(120)
  cep         String  @db.VarChar(15)
  complemento String? @db.VarChar(45)

  cidade   Cidade @relation(fields: [idCidade], references: [id])
  idCidade Int    @map("id_cidade") @db.Int

  // Relacionamento com Empresa
  empresa Empresa[]

  @@map("tblendereco_empresa")
}

//Fim Layer Endereço

///PLANOS
model Plano {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome  String  @db.VarChar(40)
  valor Decimal @db.Decimal()
  ativo Boolean @db.TinyInt

  //Relacionamento com Assinatura
  assinatura Assinatura[]

  //Relacionamento com a tabela intermediaria PlanoBeneficio
  planoBeneficio PlanoBeneficio[]

  @@map("tblplanos")
}

model Assinatura {
  id Int @id @unique @default(autoincrement()) @db.Int

  data_inicio          DateTime @db.Date()
  data_fim             DateTime @db.Date()
  renovacao_automatica Boolean  @db.TinyInt

  plano   Plano @relation(fields: [idPlano], references: [id])
  idPlano Int   @map("id_plano") @db.Int

  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa Int     @map("id_empresa") @db.Int

  pagamento Pagamento[]

  @@map("tblassinatura")
}

model Pagamento {
  id Int @id @unique @default(autoincrement()) @db.Int

  data_pagamento DateTime @db.DateTime()
  juros          Decimal  @db.Decimal()

  // Relacionamento com PagamentoPix
  pagamentoPix PagamentoPix[]

  assinatura   Assinatura @relation(fields: [idAssinatura], references: [id])
  idAssinatura Int        @map("id_assinatura") @db.Int

  // Relacionando com PagamentoCartao
  pagamentoCartao PagamentoCartao[]

  @@map("tblpagamento")
}

model Beneficio {
  id Int @id @unique @default(autoincrement()) @db.Int

  descricao String @db.Text

  planoBeneficio PlanoBeneficio[]

  @@map("tblbeneficio")
}

model PlanoBeneficio {
  id Int @id @unique @default(autoincrement()) @db.Int

  plano   Plano @relation(fields: [idPlano], references: [id])
  idPlano Int   @map("id_plano") @db.Int

  beneficio   Beneficio @relation(fields: [idBeneficio], references: [id])
  idBeneficio Int       @map("id_beneficio") @db.Int

  @@map("tblplano_beneficio")
}

//FIM PLANOS 

model PagamentoPix {
  id Int @id @unique @default(autoincrement()) @db.Int

  chave  String? @db.VarChar(45)
  qrcode String? @db.Text

  // Relacionamento com Pagamento
  pagamento   Pagamento @relation(fields: [idPagamento], references: [id])
  idPagamento Int       @map("id_pagamento") @db.Int

  @@map("tblpagamento_pix")
}

model PagamentoCartao {
  id Int @id @unique @default(autoincrement()) @db.Int

  data_validade DateTime @db.Date

  // Relacionamento com a tabela CartaoBandeira
  cartaoBandeira CartaoBandeira @relation(fields: [idBandeira], references: [id])
  idBandeira     Int            @map("id_bandeira") @db.Int

  // Relacionamento com Pagamento
  pagamento Pagamento @relation(fields: [idPagamento], references: [id])
  idPagamento Int @db.Int @map("id_pagamento")

  // Relacionamento com CartaoForma
  cartaoForma CartaoForma[]

  @@map("tblpagamento_cartao")
}

model CartaoBandeira {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome String @db.VarChar(45)

  // Relacionamento com PagamentoCartao
  pagamentoCartao PagamentoCartao[]

  @@map("tblcartao_bandeira")
}

model CartaoForma {
  id Int @id @unique @default(autoincrement()) @db.Int

  // Relacionamento com PagamentoCartao
  pagamentoCartao PagamentoCartao @relation(fields: [idCartao], references: [id])
  idCartao        Int             @map("id_cartao") @db.Int

  // Relacionamento FormaPagamento
  formaPagamento   FormaPagamento @relation(fields: [idFormaPagamento], references: [id])
  idFormaPagamento Int            @map("id_forma") @db.Int

  @@map("tblcartao_forma")
}

model FormaPagamento {
  id Int @id @unique @default(autoincrement()) @db.Int

  nome String @db.VarChar(45)

  // Relacionamento com CartaoForma
  cartaoForma CartaoForma[]

  @@map("tblforma_pagamento")
}

// Empresa
model Empresa {
  id Int @id @unique @default(autoincrement()) @db.Int

  cnpj      Int     @db.Int
  email     String  @db.VarChar(180)
  senha     String  @db.VarChar(45)
  ativo     Boolean @db.TinyInt
  biografia String? @db.Text
  logo      String? @db.VarChar(120)

  // Relacionamento com EnderecoEmpresa
  enderecoEmpresa EnderecoEmpresa @relation(fields: [idEndereco], references: [id])
  idEndereco      Int             @map("id_endereco") @db.Int

  // Relacionamento com EmpresaTelefone
  empresaTelefone EmpresaTelefone[]

  // Relacionamento com FotosAmbiente
  fotosAmbiente FotosAmbiente[]

  // Relacioanmento com EmpresaAvaliacao
  empresaAvaliacao EmpresaAvaliacao[]

  //Relacionamento com Assinatura
  assinatura Assinatura[]

  @@map("tblempresa")
}

//                                //
//  ADICIONAR TBLPROVA_ANDAMENTO //
//                              //

model EmpresaTelefone {
  id Int @id @unique @default(autoincrement()) @db.Int

  ddd    String @db.VarChar(2)
  numero String @db.VarChar(22)

  // Relacionamento com a Empresa
  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa Int     @map("id_empresa") @db.Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblempresa_telefone")
}

model FotosAmbiente {
  id Int @id @unique @default(autoincrement()) @db.Int

  foto    String @db.VarChar(200)
  legenda String @db.VarChar(45)

  // Relacionamento com Empresa
  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa Int     @map("id_empresa") @db.Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblfotos_ambiente")
}

model EmpresaAvaliacao {
  id Int @id @unique @default(autoincrement()) @db.Int

  estrelas   Int    @db.Int
  comentario String @db.Text

  // Relacionamento com Empresa
  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa Int     @map("id_empresa") @db.Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblavaliacoes")
}
// FIM - Planos

// Testes de Competências
model TesteCompetencia {
  id Int @db.Int @id @unique @default(autoincrement())

  titulo String @db.VarChar(50) 
  status Boolean @db.TinyInt

  // Relacionamento com Administrador
  administrador Administrador @relation(fields: [idAdministrador], references: [id])
  idAdministrador Int @db.Int @map("id_administrador")

  // Relacionamento com TesteEmblema
  emblema TesteEmblema @relation(fields: [idEmblema], references: [id])
  idEmblema Int @db.Int @map("id_emblema")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblteste_competencia")
}

model TesteEmblema {
  id Int @db.Int @id @unique @default(autoincrement())

  icone String @db.VarChar(60)
  titulo String @db.VarChar(90)
  condicao Decimal @db.Decimal()

  // Relacionamento com TesteCompetencia
  testeCompetencia TesteCompetencia[]
  

  @@map("tblemblema")
}

// Administrador
model Administrador {
  id Int @db.Int @id @unique @default(autoincrement())

  nome String @db.VarChar(180)
  email String @db.VarChar(110)
  senha String @db.VarChar(45)
  ativo Boolean @db.TinyInt
  root Boolean @db.TinyInt

  // Relacionamento com TesteCompetencia
  testeCompetencia TesteCompetencia[]

  @@map("tbladministrador")
}






























///Teste comportamental
model TesteComportamental{
  
  id Int @id @unique @default(autoincrement()) @db.Int

  titulo String @db.VarChar(90)
  descricao String @db.Text

  usuarioTesteComportamental UsuarioTesteComportamental[]

  @@map("tblteste_comportamental")
  
}

model UsuarioTesteComportamental {
  
  id Int @id @unique @default(autoincrement()) @db.Int

  resultado String @db.VarChar(45)
  descricao_resultado String @db.Text
  
   // Relacionamento com Empresa
  testeComportamental   TesteComportamental  @relation(fields: [idTesteComportamental], references: [id])
  idTesteComportamental Int  @map("id_teste_comportamental") @db.Int

  usuario Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario Int @map("id_usuario") @db.Int


  @@map("tblusuario_teste_comportamental")
}